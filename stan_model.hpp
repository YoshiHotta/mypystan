// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace stan_model_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
class stan_model_model : public prob_grad {
private:
    int n;
    vector_d x;
    vector_d y;
public:
    stan_model_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "stan_model_model_namespace::stan_model_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        validate_non_negative_index("x", "n", n);
        x = vector_d(n);
        context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(n));
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        size_t x_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < x_i_vec_lim__; ++i_vec__) {
            x[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("y", "n", n);
        y = vector_d(n);
        context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
            y[i_vec__] = vals_r__[pos__++];
        }

        // validate data
        check_greater_or_equal(function__,"n",n,1);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~stan_model_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("delta")))
            throw std::runtime_error("variable delta missing");
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        context__.validate_dims("initialization", "delta", "double", context__.to_vec());
        double delta(0);
        delta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,delta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta: ") + e.what());
        }

        if (!(context__.contains_r("dx")))
            throw std::runtime_error("variable dx missing");
        vals_r__ = context__.vals_r("dx");
        pos__ = 0U;
        context__.validate_dims("initialization", "dx", "double", context__.to_vec());
        double dx(0);
        dx = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,dx);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable dx: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ alpha;
        (void) alpha;   // dummy to suppress unused var warning
        if (jacobian__)
            alpha = in__.scalar_lb_constrain(0,lp__);
        else
            alpha = in__.scalar_lb_constrain(0);

        T__ delta;
        (void) delta;   // dummy to suppress unused var warning
        if (jacobian__)
            delta = in__.scalar_lb_constrain(0,lp__);
        else
            delta = in__.scalar_lb_constrain(0);

        T__ dx;
        (void) dx;   // dummy to suppress unused var warning
        if (jacobian__)
            dx = in__.scalar_lb_constrain(0,lp__);
        else
            dx = in__.scalar_lb_constrain(0);


        // transformed parameters

        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  cov(n,n);
                (void) cov;  // dummy to suppress unused var warning
                stan::math::fill(cov,DUMMY_VAR__);
                Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(n);
                (void) mu;  // dummy to suppress unused var warning
                stan::math::fill(mu,DUMMY_VAR__);
                stan::math::initialize(cov, DUMMY_VAR__);
                stan::math::initialize(mu, DUMMY_VAR__);
                current_statement_begin__ = 18;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 19;
                    for (int j = 1; j <= (i - 1); ++j) {
                        current_statement_begin__ = 20;
                        stan::math::assign(get_base1_lhs(cov,i,j,"cov",1), (alpha * exp(((-((get_base1(x,i,"x",1) - get_base1(x,j,"x",1))) * (get_base1(x,i,"x",1) - get_base1(x,j,"x",1))) / ((2.0 * dx) * dx)))));
                        current_statement_begin__ = 21;
                        stan::math::assign(get_base1_lhs(cov,j,i,"cov",1), get_base1(cov,i,j,"cov",1));
                    }
                    current_statement_begin__ = 23;
                    stan::math::assign(get_base1_lhs(cov,i,i,"cov",1), (alpha + delta));
                    current_statement_begin__ = 24;
                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), 0.0);
                }
                current_statement_begin__ = 27;
                lp_accum__.add(multi_normal_log<propto__>(y, mu, cov));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("delta");
        names__.push_back("dx");
        names__.push_back("t");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "stan_model_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double alpha = in__.scalar_lb_constrain(0);
        double delta = in__.scalar_lb_constrain(0);
        double dx = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);
        vars__.push_back(delta);
        vars__.push_back(dx);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d t(n);
        (void) t;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(t,DUMMY_VAR__);

        try {
            {
                matrix_d cov_yy(n,n);
                (void) cov_yy;  // dummy to suppress unused var warning
                matrix_d cov_yt(n,n);
                (void) cov_yt;  // dummy to suppress unused var warning
                matrix_d cov_tt(n,n);
                (void) cov_tt;  // dummy to suppress unused var warning
                matrix_d inv_cov_yy(n,n);
                (void) inv_cov_yy;  // dummy to suppress unused var warning
                stan::math::initialize(cov_yy, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cov_yt, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cov_tt, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(inv_cov_yy, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 40;
                for (int i = 1; i <= n; ++i) {
                    current_statement_begin__ = 41;
                    for (int j = 1; j <= (i - 1); ++j) {
                        current_statement_begin__ = 42;
                        stan::math::assign(get_base1_lhs(cov_yy,i,j,"cov_yy",1), (alpha * exp(((-((get_base1(x,i,"x",1) - get_base1(x,j,"x",1))) * (get_base1(x,i,"x",1) - get_base1(x,j,"x",1))) / ((2.0 * dx) * dx)))));
                        current_statement_begin__ = 43;
                        stan::math::assign(get_base1_lhs(cov_yy,j,i,"cov_yy",1), get_base1(cov_yy,i,j,"cov_yy",1));
                        current_statement_begin__ = 44;
                        stan::math::assign(get_base1_lhs(cov_yt,i,j,"cov_yt",1), get_base1(cov_yy,i,j,"cov_yy",1));
                        current_statement_begin__ = 45;
                        stan::math::assign(get_base1_lhs(cov_yt,j,i,"cov_yt",1), get_base1(cov_yy,i,j,"cov_yy",1));
                        current_statement_begin__ = 46;
                        stan::math::assign(get_base1_lhs(cov_tt,i,j,"cov_tt",1), get_base1(cov_yy,i,j,"cov_yy",1));
                        current_statement_begin__ = 47;
                        stan::math::assign(get_base1_lhs(cov_tt,j,i,"cov_tt",1), get_base1(cov_yy,i,j,"cov_yy",1));
                    }
                    current_statement_begin__ = 49;
                    stan::math::assign(get_base1_lhs(cov_yy,i,i,"cov_yy",1), (alpha + delta));
                    current_statement_begin__ = 50;
                    stan::math::assign(get_base1_lhs(cov_yt,i,i,"cov_yt",1), alpha);
                    current_statement_begin__ = 51;
                    stan::math::assign(get_base1_lhs(cov_tt,i,i,"cov_tt",1), alpha);
                }
                current_statement_begin__ = 54;
                stan::math::assign(inv_cov_yy, inverse(cov_yy));
                current_statement_begin__ = 55;
                stan::math::assign(t, multi_normal_rng(multiply(multiply(cov_yt,inv_cov_yy),y),subtract(cov_tt,multiply(multiply(cov_yt,inv_cov_yy),cov_yy)), base_rng__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(t[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "stan_model_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dx";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dx";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace

typedef stan_model_model_namespace::stan_model_model stan_model;

